#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
import talib
from RSIPredictionTest import load_rsi_model

def get_latest_rsi_prediction():
    """
    –ü–æ–ª—É—á–∏—Ç—å –†–ï–ê–õ–¨–ù–´–ô –ø—Ä–æ–≥–Ω–æ–∑ RSI –Ω–∞ 30.06.2025 –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 29.06.2025
    """
    print("üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –ü–†–û–ì–ù–û–ó–ê RSI –ù–ê 30.06.2025")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    print("üìä 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    df = pd.read_csv("accumulatedData_2024.csv")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    print("üîß 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
    numeric_cols = ['open', 'high', 'low', 'close', 'volume', 'atr', 'atr_stop', 
                   'atr_to_price_ratio', 'fast_ema', 'slow_ema', 'ema_fast_deviation',
                   'pchange', 'avpchange', 'gma', 'positionBetweenBands', 'choppiness_index',
                   'volatility_percent', 'rsi_volatility', 'adx', 'rsi_delta', 'linear_regression']
    
    for col in numeric_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(
                df[col].astype(str).str.replace(',', '.', regex=False),
                errors='coerce'
            ).fillna(0)
    
    # –í—ã—á–∏—Å–ª—è–µ–º RSI –∏ MACD –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üìà 3. –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...")
    df['rsi_current'] = talib.RSI(df['close'].values, timeperiod=14)
    
    macd, macd_signal, macd_hist = talib.MACD(df['close'].values, 
                                              fastperiod=12, slowperiod=26, signalperiod=9)
    df['macd'] = macd
    df['macd_signal'] = macd_signal
    df['macd_histogram'] = macd_hist
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['rsi_sma_5'] = df['rsi_current'].rolling(5).mean()
    df['rsi_sma_10'] = df['rsi_current'].rolling(10).mean()
    df['rsi_momentum'] = df['rsi_current'].diff()
    df['rsi_rate_of_change'] = df['rsi_current'].pct_change()
    
    df['close_diff'] = df['close'].diff()
    df['normalized_price_change'] = df['close_diff'] / df['close'].shift(1)
    df['rolling_mean_close'] = df['close'].rolling(20).mean()
    df['rolling_std_close'] = df['close'].rolling(20).std()
    
    df['volume_sma'] = df['volume'].rolling(10).mean()
    df['volume_ratio'] = df['volume'] / df['volume_sma']
    
    df['macd_signal_diff'] = df['macd'] - df['macd_signal']
    df['macd_momentum'] = df['macd'].diff()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üîç 4. –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 29.06.2025...")
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    last_row_idx = len(df) - 1
    while last_row_idx >= 0 and pd.isna(df.iloc[last_row_idx]['rsi_current']):
        last_row_idx -= 1
    
    if last_row_idx < 0:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å RSI")
        return None
    
    last_row = df.iloc[last_row_idx]
    date_str = str(last_row['open_time'])[:10]
    
    print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞: {date_str}")
    print(f"   ‚Ä¢ RSI –Ω–∞ —ç—Ç—É –¥–∞—Ç—É: {last_row['rsi_current']:.2f}")
    print(f"   ‚Ä¢ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {last_row['close']:.2f}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    print("\nü§ñ 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
    model, feature_info = load_rsi_model()
    
    if model is None:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python RSIPredictor.py")
        return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    print("üîÆ 6. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å
    required_features = feature_info['important_features']
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_values = []
    missing_features = []
    
    for feature in required_features:
        if feature in last_row and not pd.isna(last_row[feature]):
            feature_values.append(last_row[feature])
        else:
            feature_values.append(0.0)  # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            missing_features.append(feature)
    
    if missing_features:
        print(f"   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω—É–ª—è–º–∏: {len(missing_features)} –∏–∑ {len(required_features)}")
    
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    print("üéØ 7. –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑...")
    features_array = np.array(feature_values).reshape(1, -1).astype('float32')
    prediction = model.predict(features_array)[0]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*60)
    print("üìà –ü–†–û–ì–ù–û–ó RSI –ù–ê 30.06.2025")
    print("="*60)
    print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞: {date_str}")
    print(f"üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {last_row['close']:.2f}")
    print(f"üìâ –¢–µ–∫—É—â–∏–π RSI: {last_row['rsi_current']:.2f}")
    print(f"üéØ –ü–†–û–ì–ù–û–ó RSI –Ω–∞ 30.06.2025: {prediction:.2f}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    change = prediction - last_row['rsi_current']
    print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ RSI: {change:+.2f} –ø—É–Ω–∫—Ç–æ–≤")
    
    # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    print("\nüí° –¢–û–†–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
    
    if prediction < 30:
        signal = "üü¢ –°–ò–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê"
        advice = "RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫"
    elif prediction < 40:
        signal = "üîµ –ü–û–ö–£–ü–ö–ê"
        advice = "RSI –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏"
    elif prediction > 70:
        signal = "üî¥ –°–ò–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê"
        advice = "RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
    elif prediction > 60:
        signal = "üü† –ü–†–û–î–ê–ñ–ê"
        advice = "RSI –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏"
    else:
        signal = "‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–û"
        advice = "RSI –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"
    
    print(f"üéØ –°–∏–≥–Ω–∞–ª: {signal}")
    print(f"üí≠ –°–æ–≤–µ—Ç: {advice}")
    
    if abs(change) > 5:
        print(f"‚ö° –í–ê–ñ–ù–û: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ RSI –Ω–∞ {abs(change):.1f} –ø—É–Ω–∫—Ç–æ–≤!")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\nüìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:")
    print(f"   ‚Ä¢ MACD: {last_row.get('macd', 'N/A')}")
    print(f"   ‚Ä¢ ADX: {last_row.get('adx', 'N/A')}")
    print(f"   ‚Ä¢ Volatility: {last_row.get('volatility_percent', 'N/A')}%")
    
    return {
        'date': date_str,
        'current_rsi': last_row['rsi_current'],
        'predicted_rsi': prediction,
        'change': change,
        'price': last_row['close'],
        'signal': signal
    }

if __name__ == "__main__":
    result = get_latest_rsi_prediction()
    
    if result:
        print(f"\n‚úÖ –ò–¢–û–ì: –ù–∞ 30.06.2025 RSI –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è {result['predicted_rsi']:.2f}")
        print(f"   (–∏–∑–º–µ–Ω–µ–Ω–∏–µ {result['change']:+.2f} –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ {result['current_rsi']:.2f})")
        print(f"   –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {result['signal']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")