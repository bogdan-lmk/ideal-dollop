#!/usr/bin/env python3
# -*- coding: utf-8 -*-

print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ RSI –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø")
print("=" * 60)

import os
import sys

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
print("üìÅ 1. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í:")
print("-" * 40)

required_files = {
    'models/rsi_predictor_model.pkl': '–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å PKL',
    'models/rsi_model_features.pkl': '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤',
    'models/rsi_model_catboost.cbm': 'CatBoost –Ω–∞—Ç–∏–≤–Ω—ã–π',
    'models/rsi_model.json': 'JSON —Ñ–æ—Ä–º–∞—Ç',
    'models/README.md': '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π',
    'RSIPredictor.py': '–°–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è',
    'RSIPredictionTest.py': '–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    'get_real_prediction.py': '–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞',
    'accumulatedData_2024.csv': '–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è'
}

missing_files = []
for file_path, description in required_files.items():
    if os.path.exists(file_path):
        size = os.path.getsize(file_path) / 1024  # KB
        print(f"‚úÖ {file_path} ({size:.1f} KB) - {description}")
    else:
        print(f"‚ùå {file_path} - {description}")
        missing_files.append(file_path)

if missing_files:
    print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {len(missing_files)}")
    sys.exit(1)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏
print(f"\nü§ñ 2. –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ú–û–î–ï–õ–ò:")
print("-" * 40)

try:
    from RSIPredictionTest import load_rsi_model
    model, features = load_rsi_model()
    
    if model is not None:
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ –¢–∏–ø –º–æ–¥–µ–ª–∏: {type(model)}")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features['important_features'])}")
        print(f"‚úÖ –¢–æ–ø-5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features['important_features'][:5]}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")
        sys.exit(1)
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    sys.exit(1)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
print(f"\nüîÆ 3. –¢–ï–°–¢ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø:")
print("-" * 40)

try:
    import pandas as pd
    import numpy as np
    from RSIPredictor import transform_rsi_features
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv("accumulatedData_2024.csv")
    processed = transform_rsi_features(df)
    
    if len(processed) > 0:
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {len(processed)} –∑–∞–ø–∏—Å–µ–π")
        
        # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        test_features = processed[features['important_features']].iloc[-1:].copy()
        test_features.columns = [f"f{i}" for i in range(len(features['important_features']))]
        
        prediction = model.predict(test_features.astype('float32'))[0]
        current_rsi = processed['rsi_current'].iloc[-1]
        
        print(f"‚úÖ –¢–µ–∫—É—â–∏–π RSI: {current_rsi:.2f}")
        print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ RSI: {prediction:.2f}")
        print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {prediction - current_rsi:+.2f}")
        
    else:
        print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    sys.exit(1)

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
print(f"\nüì¶ 4. –¢–ï–°–¢ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –§–û–†–ú–ê–¢–û–í:")
print("-" * 40)

# –¢–µ—Å—Ç CBM —Ñ–æ—Ä–º–∞—Ç–∞
try:
    from catboost import CatBoostRegressor
    cbm_model = CatBoostRegressor()
    cbm_model.load_model("models/rsi_model_catboost.cbm")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    cbm_prediction = cbm_model.predict(test_features)[0]
    print(f"‚úÖ CBM —Ñ–æ—Ä–º–∞—Ç: {cbm_prediction:.2f} (—Ä–∞–∑–Ω–∏—Ü–∞: {abs(prediction - cbm_prediction):.4f})")
    
except Exception as e:
    print(f"‚ùå CBM —Ñ–æ—Ä–º–∞—Ç: {e}")

# –¢–µ—Å—Ç JSON —Ñ–æ—Ä–º–∞—Ç–∞
try:
    import json
    with open("models/rsi_model.json", "r") as f:
        json_data = json.load(f)
    print(f"‚úÖ JSON —Ñ–æ—Ä–º–∞—Ç: –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä {len(str(json_data))} —Å–∏–º–≤–æ–ª–æ–≤")
    
except Exception as e:
    print(f"‚ùå JSON —Ñ–æ—Ä–º–∞—Ç: {e}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
print(f"\nüìä 5. –ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò:")
print("-" * 40)

try:
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    all_features = processed[features['important_features']].copy()
    all_features.columns = [f"f{i}" for i in range(len(features['important_features']))]
    
    predictions = model.predict(all_features.astype('float32'))
    actual = processed['rsi_next_day'].values
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    errors = np.abs(predictions - actual)
    mae = np.mean(errors)
    within_5 = np.sum(errors <= 5) / len(errors) * 100
    
    print(f"‚úÖ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {mae:.2f} –ø—É–Ω–∫—Ç–∞ RSI")
    print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å ¬±5 –ø—É–Ω–∫—Ç–æ–≤: {within_5:.1f}%")
    
    if mae <= 2:
        print("üèÜ –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –û–¢–õ–ò–ß–ù–£–Æ —Ç–æ—á–Ω–æ—Å—Ç—å!")
    elif mae <= 5:
        print("‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –•–û–†–û–®–£–Æ —Ç–æ—á–Ω–æ—Å—Ç—å!")
    else:
        print("‚ö†Ô∏è  –ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏: {e}")

# –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print(f"\nüéâ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
print("=" * 60)
print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ RSI –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞!")
print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ 4 —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
print(f"‚úÖ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {mae:.2f} –ø—É–Ω–∫—Ç–∞ RSI")
print(f"‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

print(f"\nüöÄ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
print("-" * 40)
print(f"1. –î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞: python get_real_prediction.py")
print(f"2. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: python RSIPredictionTest.py")
print(f"3. –î–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: python RSIPredictor.py")
print(f"4. –ú–æ–¥–µ–ª–∏ –≤ –ø–∞–ø–∫–µ: models/")

print(f"\nüéØ –ü–†–û–ì–ù–û–ó –ù–ê –ó–ê–í–¢–†–ê:")
print("-" * 40)
print(f"RSI —Å–µ–≥–æ–¥–Ω—è: {current_rsi:.2f}")
print(f"RSI –∑–∞–≤—Ç—Ä–∞ (–ø—Ä–æ–≥–Ω–æ–∑): {prediction:.2f}")
print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {prediction - current_rsi:+.2f} –ø—É–Ω–∫—Ç–∞")

if abs(prediction - current_rsi) > 5:
    print("‚ö° –û–∂–∏–¥–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ RSI!")
elif prediction < 30:
    print("üü¢ –í–æ–∑–º–æ–∂–Ω–∞ –ø–æ–∫—É–ø–∫–∞ - RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏")
elif prediction > 70:
    print("üî¥ –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ - RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏")
else:
    print("‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ - –Ω–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

print(f"\n‚ú® –ì–û–¢–û–í–û –ö –¢–û–†–ì–û–í–õ–ï! ‚ú®")