#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from RSIPredictor import transform_rsi_features
from RSIPredictionTest import load_rsi_model

def analyze_prediction_accuracy():
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ RSI
    """
    print("üìä –ê–ù–ê–õ–ò–ó –ü–û–ì–†–ï–®–ù–û–°–¢–ò –ü–†–û–ì–ù–û–ó–û–í RSI")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –º–æ–¥–µ–ª—å
    print("üîÑ 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –º–æ–¥–µ–ª—å...")
    raw_df = pd.read_csv("accumulatedData_2024.csv", parse_dates=["open_time"])
    processed_df = transform_rsi_features(raw_df)
    model, feature_info = load_rsi_model()
    
    if model is None or len(processed_df) == 0:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –º–æ–¥–µ–ª–∏")
        return
    
    print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_df)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    print("üîß 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
    
    features = processed_df[feature_info['important_features']]
    features.columns = [f"f{i}" for i in range(len(feature_info['important_features']))]
    
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    y_actual = processed_df['rsi_next_day'].values
    y_predicted = model.predict(features.astype('float32'))
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫
    print("üìà 3. –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò –¢–û–ß–ù–û–°–¢–ò:")
    print("-" * 50)
    
    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
    absolute_errors = np.abs(y_actual - y_predicted)
    
    mae = np.mean(absolute_errors)  # –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    median_ae = np.median(absolute_errors)  # –ú–µ–¥–∏–∞–Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –æ—à–∏–±–∫–∏
    max_error = np.max(absolute_errors)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
    min_error = np.min(absolute_errors)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
    std_error = np.std(absolute_errors)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
    
    print(f"üìä –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE): {mae:.2f} –ø—É–Ω–∫—Ç–æ–≤ RSI")
    print(f"üìä –ú–µ–¥–∏–∞–Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –æ—à–∏–±–∫–∏: {median_ae:.2f} –ø—É–Ω–∫—Ç–æ–≤ RSI")
    print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {max_error:.2f} –ø—É–Ω–∫—Ç–æ–≤ RSI")
    print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {min_error:.2f} –ø—É–Ω–∫—Ç–æ–≤ RSI")
    print(f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_error:.2f} –ø—É–Ω–∫—Ç–æ–≤ RSI")
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    print(f"\nüéØ 4. –ü–†–û–¶–ï–ù–¢–ù–ê–Ø –¢–û–ß–ù–û–°–¢–¨:")
    print("-" * 50)
    
    # –¢–æ—á–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö –æ—à–∏–±–æ–∫
    within_1 = np.sum(absolute_errors <= 1) / len(absolute_errors) * 100
    within_2 = np.sum(absolute_errors <= 2) / len(absolute_errors) * 100
    within_3 = np.sum(absolute_errors <= 3) / len(absolute_errors) * 100
    within_5 = np.sum(absolute_errors <= 5) / len(absolute_errors) * 100
    within_10 = np.sum(absolute_errors <= 10) / len(absolute_errors) * 100
    
    print(f"‚úÖ –û—à–∏–±–∫–∞ ‚â§ 1 –ø—É–Ω–∫—Ç RSI: {within_1:.1f}% –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print(f"‚úÖ –û—à–∏–±–∫–∞ ‚â§ 2 –ø—É–Ω–∫—Ç–∞ RSI: {within_2:.1f}% –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print(f"‚úÖ –û—à–∏–±–∫–∞ ‚â§ 3 –ø—É–Ω–∫—Ç–∞ RSI: {within_3:.1f}% –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print(f"‚úÖ –û—à–∏–±–∫–∞ ‚â§ 5 –ø—É–Ω–∫—Ç–æ–≤ RSI: {within_5:.1f}% –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print(f"‚úÖ –û—à–∏–±–∫–∞ ‚â§ 10 –ø—É–Ω–∫—Ç–æ–≤ RSI: {within_10:.1f}% –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º RSI
    print(f"\nüìä 5. –¢–û–ß–ù–û–°–¢–¨ –ü–û –î–ò–ê–ü–ê–ó–û–ù–ê–ú RSI:")
    print("-" * 50)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω—ã RSI
    oversold_mask = y_actual < 30  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
    overbought_mask = y_actual > 70  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å  
    neutral_mask = (y_actual >= 30) & (y_actual <= 70)  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
    
    if np.sum(oversold_mask) > 0:
        oversold_mae = np.mean(absolute_errors[oversold_mask])
        print(f"üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (RSI < 30): {oversold_mae:.2f} MAE ({np.sum(oversold_mask)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤)")
    else:
        print(f"üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (RSI < 30): –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    if np.sum(overbought_mask) > 0:
        overbought_mae = np.mean(absolute_errors[overbought_mask])
        print(f"üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (RSI > 70): {overbought_mae:.2f} MAE ({np.sum(overbought_mask)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤)")
    else:
        print(f"üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (RSI > 70): –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    if np.sum(neutral_mask) > 0:
        neutral_mae = np.mean(absolute_errors[neutral_mask])
        print(f"‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ (30-70): {neutral_mae:.2f} MAE ({np.sum(neutral_mask)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤)")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print(f"\nüéØ 6. –¢–û–ß–ù–û–°–¢–¨ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
    print("-" * 50)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    actual_direction = np.sign(y_actual - processed_df['rsi_current'].values)
    predicted_direction = np.sign(y_predicted - processed_df['rsi_current'].values)
    
    # –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    direction_accuracy = np.sum(actual_direction == predicted_direction) / len(actual_direction) * 100
    
    print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {direction_accuracy:.1f}%")
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
    up_predictions = np.sum(predicted_direction == 1)
    down_predictions = np.sum(predicted_direction == -1)
    flat_predictions = np.sum(predicted_direction == 0)
    
    print(f"   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã —Ä–æ—Å—Ç–∞ RSI: {up_predictions} ({up_predictions/len(predicted_direction)*100:.1f}%)")
    print(f"   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –ø–∞–¥–µ–Ω–∏—è RSI: {down_predictions} ({down_predictions/len(predicted_direction)*100:.1f}%)")
    print(f"   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {flat_predictions} ({flat_predictions/len(predicted_direction)*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –æ—à–∏–±–æ–∫
    print(f"\n‚ö†Ô∏è  7. –ê–ù–ê–õ–ò–ó –ë–û–õ–¨–®–ò–• –û–®–ò–ë–û–ö:")
    print("-" * 50)
    
    large_errors_mask = absolute_errors > 10
    large_errors_count = np.sum(large_errors_mask)
    
    if large_errors_count > 0:
        print(f"üö® –û—à–∏–±–∫–∏ > 10 –ø—É–Ω–∫—Ç–æ–≤: {large_errors_count} —Å–ª—É—á–∞–µ–≤ ({large_errors_count/len(absolute_errors)*100:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –±–æ–ª—å—à–∏—Ö –æ—à–∏–±–æ–∫
        large_error_indices = np.where(large_errors_mask)[0][:5]  # –ü–µ—Ä–≤—ã–µ 5 —Å–ª—É—á–∞–µ–≤
        
        print(f"   –ü—Ä–∏–º–µ—Ä—ã –±–æ–ª—å—à–∏—Ö –æ—à–∏–±–æ–∫:")
        for idx in large_error_indices:
            actual_val = y_actual[idx]
            pred_val = y_predicted[idx]
            error = absolute_errors[idx]
            print(f"   ‚Ä¢ –§–∞–∫—Ç: {actual_val:.1f}, –ü—Ä–æ–≥–Ω–æ–∑: {pred_val:.1f}, –û—à–∏–±–∫–∞: {error:.1f}")
    else:
        print(f"‚úÖ –ë–æ–ª—å—à–∏—Ö –æ—à–∏–±–æ–∫ (>10 –ø—É–Ω–∫—Ç–æ–≤) –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    print(f"\nüìä 8. –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–ê–Ø –¢–û–ß–ù–û–°–¢–¨:")
    print("-" * 50)
    
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è RSI
    relative_errors = (absolute_errors / y_actual) * 100
    mean_relative_error = np.mean(relative_errors)
    median_relative_error = np.median(relative_errors)
    
    print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {mean_relative_error:.1f}%")
    print(f"üìä –ú–µ–¥–∏–∞–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏: {median_relative_error:.1f}%")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
    print(f"\nüèÜ 9. –°–†–ê–í–ù–ï–ù–ò–ï –° –ë–ê–ó–û–í–´–ú–ò –ú–û–î–ï–õ–Ø–ú–ò:")
    print("-" * 50)
    
    # –ú–æ–¥–µ–ª—å "–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" (RSI –∑–∞–≤—Ç—Ä–∞ = RSI —Å–µ–≥–æ–¥–Ω—è)
    no_change_errors = np.abs(y_actual - processed_df['rsi_current'].values)
    no_change_mae = np.mean(no_change_errors)
    
    # –ú–æ–¥–µ–ª—å —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    mean_rsi = np.mean(processed_df['rsi_current'].values)
    mean_model_errors = np.abs(y_actual - mean_rsi)
    mean_model_mae = np.mean(mean_model_errors)
    
    print(f"ü§ñ –ù–∞—à–∞ –º–æ–¥–µ–ª—å MAE: {mae:.2f}")
    print(f"üìä –ú–æ–¥–µ–ª—å '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π' MAE: {no_change_mae:.2f}")
    print(f"üìä –ú–æ–¥–µ–ª—å '—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ' MAE: {mean_model_mae:.2f}")
    
    improvement_vs_no_change = ((no_change_mae - mae) / no_change_mae) * 100
    improvement_vs_mean = ((mean_model_mae - mae) / mean_model_mae) * 100
    
    print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π': {improvement_vs_no_change:.1f}%")
    print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ '—Å—Ä–µ–¥–Ω–µ–≥–æ': {improvement_vs_mean:.1f}%")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    create_accuracy_plots(y_actual, y_predicted, absolute_errors)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\nüéØ 10. –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ú–û–î–ï–õ–ò:")
    print("=" * 60)
    
    if mae <= 3:
        grade = "üèÜ –û–¢–õ–ò–ß–ù–ê–Ø"
    elif mae <= 5:
        grade = "‚úÖ –•–û–†–û–®–ê–Ø"
    elif mae <= 7:
        grade = "‚ö° –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–ê–Ø"
    else:
        grade = "‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø"
    
    print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {mae:.2f} –ø—É–Ω–∫—Ç–æ–≤ RSI")
    print(f"üéØ –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏: {grade}")
    print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {direction_accuracy:.1f}%")
    print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –ø—É–Ω–∫—Ç–æ–≤: {within_5:.1f}%")
    
    print(f"\nüí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
    print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å –¥–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ {within_5:.0f}% —Å–ª—É—á–∞–µ–≤ (¬±5 –ø—É–Ω–∫—Ç–æ–≤)")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ {mae:.1f} –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–ª–µ–º–∞ –¥–ª—è RSI (0-100)")
    print(f"   ‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ {direction_accuracy:.0f}% —Å–ª—É—á–∞–µ–≤")
    
    return {
        'mae': mae,
        'max_error': max_error,
        'direction_accuracy': direction_accuracy,
        'within_5': within_5,
        'within_3': within_3,
        'within_1': within_1
    }

def create_accuracy_plots(y_actual, y_predicted, absolute_errors):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
    """
    plt.figure(figsize=(15, 10))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ
    plt.subplot(2, 3, 1)
    plt.scatter(y_actual, y_predicted, alpha=0.6, s=20)
    plt.plot([0, 100], [0, 100], 'r--', lw=2)
    plt.xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π RSI')
    plt.ylabel('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π RSI')
    plt.title('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π vs –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π RSI')
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    plt.subplot(2, 3, 2)
    plt.hist(absolute_errors, bins=30, alpha=0.7, color='orange', edgecolor='black')
    plt.xlabel('–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫')
    plt.axvline(np.mean(absolute_errors), color='red', linestyle='--', 
                label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(absolute_errors):.2f}')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –û—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    plt.subplot(2, 3, 3)
    plt.plot(absolute_errors, alpha=0.7)
    plt.xlabel('–ù–æ–º–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞')
    plt.ylabel('–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    plt.title('–û—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
    plt.axhline(np.mean(absolute_errors), color='red', linestyle='--', 
                label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(absolute_errors):.2f}')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –û—à–∏–±–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º RSI
    plt.subplot(2, 3, 4)
    rsi_bins = np.arange(0, 101, 10)
    bin_errors = []
    bin_centers = []
    
    for i in range(len(rsi_bins)-1):
        mask = (y_actual >= rsi_bins[i]) & (y_actual < rsi_bins[i+1])
        if np.sum(mask) > 0:
            bin_errors.append(np.mean(absolute_errors[mask]))
            bin_centers.append((rsi_bins[i] + rsi_bins[i+1]) / 2)
    
    if bin_errors:
        plt.bar(bin_centers, bin_errors, width=8, alpha=0.7, color='skyblue', edgecolor='black')
        plt.xlabel('–î–∏–∞–ø–∞–∑–æ–Ω RSI')
        plt.ylabel('–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        plt.title('–û—à–∏–±–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º RSI')
        plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 5: –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    plt.subplot(2, 3, 5)
    sorted_errors = np.sort(absolute_errors)
    cumulative = np.arange(1, len(sorted_errors)+1) / len(sorted_errors) * 100
    plt.plot(sorted_errors, cumulative, linewidth=2)
    plt.xlabel('–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (%)')
    plt.title('–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫')
    plt.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for error_threshold in [1, 3, 5, 10]:
        pct = np.sum(absolute_errors <= error_threshold) / len(absolute_errors) * 100
        plt.axvline(error_threshold, linestyle='--', alpha=0.7, 
                   label=f'{error_threshold}: {pct:.1f}%')
    plt.legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ 6: –û—Å—Ç–∞—Ç–∫–∏ (residuals)
    plt.subplot(2, 3, 6)
    residuals = y_predicted - y_actual
    plt.scatter(y_predicted, residuals, alpha=0.6, s=20)
    plt.axhline(y=0, color='r', linestyle='--')
    plt.xlabel('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π RSI')
    plt.ylabel('–û—Å—Ç–∞—Ç–∫–∏ (–ü—Ä–æ–≥–Ω–æ–∑ - –§–∞–∫—Ç)')
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('rsi_accuracy_analysis.png', dpi=300, bbox_inches='tight')
    print(f"\nüìä –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ 'rsi_accuracy_analysis.png'")
    plt.show()

if __name__ == "__main__":
    results = analyze_prediction_accuracy()
    
    if results:
        print(f"\nüéØ –ö–†–ê–¢–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   MAE: {results['mae']:.2f} –ø—É–Ω–∫—Ç–æ–≤")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {results['max_error']:.2f} –ø—É–Ω–∫—Ç–æ–≤")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {results['direction_accuracy']:.1f}%")
        print(f"   –ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ ¬±5 –ø—É–Ω–∫—Ç–æ–≤: {results['within_5']:.1f}%")