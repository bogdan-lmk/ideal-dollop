#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np

print("üîç –¢–ï–°–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ù–û–í–´–• –ú–û–î–£–õ–ï–ô –° RSI –°–ò–°–¢–ï–ú–û–ô")
print("=" * 60)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
print("üì¶ 1. –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í:")
print("-" * 40)

try:
    from indicator import (
        calculate_indicators, generate_signals, alma, 
        calculate_vix_stochastic, hma, calculate_bollinger_signals
    )
    print("‚úÖ indicator.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    from klines_fetcher import get_historical_klines, fetch_historical_data
    print("‚úÖ klines_fetcher.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    from RSIPredictor import transform_rsi_features, calculate_rsi
    from RSIPredictionTest import load_rsi_model
    print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    exit(1)

# –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
print(f"\nüîß 2. –¢–ï–°–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –î–ê–ù–ù–´–•:")
print("-" * 40)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
df_test = pd.read_csv("accumulatedData_2024.csv").head(100)
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame: {df_test.shape}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫
required_cols = ['open', 'high', 'low', 'close', 'volume']
available_cols = [col for col in required_cols if col in df_test.columns]

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–µ)
for col in available_cols:
    df_test[col] = pd.to_numeric(
        df_test[col].astype(str).str.replace(',', '.', regex=False),
        errors='coerce'
    ).fillna(0)

print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: {available_cols}")

# –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π indicator.py
print(f"\nüìä 3. –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ô INDICATOR.PY:")
print("-" * 40)

try:
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    df_indicators = calculate_indicators(df_test.copy())
    new_cols = set(df_indicators.columns) - set(df_test.columns)
    print(f"‚úÖ calculate_indicators: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(new_cols)} –∫–æ–ª–æ–Ω–æ–∫")
    print(f"   –ù–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(new_cols)}")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    df_signals = generate_signals(df_indicators.copy())
    if 'signal' in df_signals.columns:
        signal_counts = df_signals['signal'].value_counts()
        print(f"‚úÖ generate_signals: {signal_counts.to_dict()}")
    
    # –¢–µ—Å—Ç ALMA
    alma_result = alma(df_test['close'].values[:50], window_size=14, offset=0.85, sigma=6)
    print(f"‚úÖ ALMA: –≤—ã—á–∏—Å–ª–µ–Ω–æ {len(alma_result)} –∑–Ω–∞—á–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç HMA
    hma_result = hma(df_test['close'], 14)
    print(f"‚úÖ HMA: –≤—ã—á–∏—Å–ª–µ–Ω–æ {len(hma_result.dropna())} –∑–Ω–∞—á–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç VIX Stochastic
    df_vix = calculate_vix_stochastic(df_test.copy())
    vix_cols = ['stochK', 'stochD']
    available_vix = [col for col in vix_cols if col in df_vix.columns]
    print(f"‚úÖ VIX Stochastic: –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ {available_vix}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ indicator.py: {e}")

# –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RSI —Å–∏—Å—Ç–µ–º–æ–π
print(f"\nüéØ 4. –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° RSI –°–ò–°–¢–ï–ú–û–ô:")
print("-" * 40)

try:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é RSI –º–æ–¥–µ–ª—å
    model, features = load_rsi_model()
    
    if model is not None:
        print("‚úÖ RSI –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        existing_features = set(features['important_features'])
        indicator_features = set(df_indicators.columns)
        
        compatible_features = existing_features & indicator_features
        missing_features = existing_features - indicator_features
        new_potential_features = indicator_features - existing_features
        
        print(f"‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {len(compatible_features)}")
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {len(missing_features)}")
        print(f"üéØ –ù–æ–≤—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {len(new_potential_features)}")
        
        if len(new_potential_features) > 0:
            print(f"   –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {list(new_potential_features)[:5]}")
            
    else:
        print("‚ùå RSI –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RSI: {e}")

# –¢–µ—Å—Ç klines_fetcher (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API)
print(f"\nüåê 5. –¢–ï–°–¢ KLINES_FETCHER (MOCK):")
print("-" * 40)

try:
    # –°–æ–∑–¥–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    mock_klines_data = [
        [1640995200000, "50000", "51000", "49000", "50500", "1000.5", 1641081599999, "50500000", 100, "500.25", "25125000", "0"],
        [1641081600000, "50500", "52000", "50000", "51500", "1200.3", 1641167999999, "61800000", 120, "600.15", "30750000", "0"]
    ]
    
    mock_df = pd.DataFrame(mock_klines_data, columns=[
        'open_time', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_asset_volume', 'number_of_trades',
        'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
    ])
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ –∏ –≤ klines_fetcher
    mock_df['open_time'] = pd.to_datetime(mock_df['open_time'], unit='ms')
    mock_df['close_time'] = pd.to_datetime(mock_df['close_time'], unit='ms')
    mock_df[['open', 'high', 'low', 'close', 'volume']] = mock_df[['open', 'high', 'low', 'close', 'volume']].astype(float)
    
    print(f"‚úÖ Mock klines –¥–∞–Ω–Ω—ã–µ: {mock_df.shape}")
    print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å indicator.py")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫ mock –¥–∞–Ω–Ω—ã–º
    mock_with_indicators = calculate_indicators(mock_df)
    print(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ klines –¥–∞–Ω–Ω—ã–º")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å klines_fetcher: {e}")

# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
print(f"\nüöÄ 6. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
print("-" * 40)

print("‚úÖ –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å ALMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ feature engineering")
print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VIX Stochastic –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏") 
print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Hull MA –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è")

print("\nüéØ –£–õ–£–ß–®–ï–ù–ò–Ø RSI –ú–û–î–ï–õ–ò:")
print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫–∏")
print("   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å ensemble –º–æ–¥–µ–ª—å —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏")
print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å real-time –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

print("\nüîÑ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
print("   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—ã–π data pipeline")
print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

print(f"\n‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
print("=" * 60)
print("üéâ –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å RSI —Å–∏—Å—Ç–µ–º–æ–π!")
print("üöÄ –ì–æ—Ç–æ–≤—ã –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤!")
print("üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ RSI!")