#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
from RSIPredictor import transform_rsi_features
from RSIPredictionTest import load_rsi_model

def show_prediction_dates():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–ª—è –∫–∞–∫–∏—Ö –¥–∞—Ç –¥–µ–ª–∞—é—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑—ã RSI
    """
    print("üîç –ê–ù–ê–õ–ò–ó –î–ê–¢ –ü–†–û–ì–ù–û–ó–û–í RSI")
    print("=" * 50)
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìä 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π dataset...")
    raw_df = pd.read_csv("accumulatedData_2024.csv", parse_dates=["open_time"])
    
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ: {len(raw_df)}")
    print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {raw_df['open_time'].min()} - {raw_df['open_time'].max()}")
    
    # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML
    print("\nüîß 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    processed_df = transform_rsi_features(raw_df)
    
    print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(processed_df)}")
    if len(processed_df) > 0:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        processed_indices = processed_df.index
        processed_dates = raw_df.iloc[processed_indices]['open_time']
        
        print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {processed_dates.min()} - {processed_dates.max()}")
    
    # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüéØ 3. –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   ‚Ä¢ –î–ª—è –¥–∞—Ç—ã X –º—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º RSI –Ω–∞ –¥–∞—Ç—É X+1")
    print("   ‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: –¥–∞–Ω–Ω—ã–µ –∑–∞ 15.05.2022 ‚Üí –ø—Ä–æ–≥–Ω–æ–∑ RSI –Ω–∞ 16.05.2022")
    
    # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –¥–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
    print("\nü§ñ 4. –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã...")
    model, feature_info = load_rsi_model()
    
    if model is None:
        print("   ‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python RSIPredictor.py")
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    if len(processed_df) >= 10:
        latest_data = processed_df.tail(10)
        
        print(f"\nüìÖ 5. –ü–û–°–õ–ï–î–ù–ò–ï 10 –ü–†–û–ì–ù–û–ó–û–í:")
        print("-" * 60)
        print("–î–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö       | –¢–µ–∫—É—â–∏–π RSI | –ü—Ä–æ–≥–Ω–æ–∑ RSI (—Å–ª–µ–¥. –¥–µ–Ω—å)")
        print("-" * 60)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = latest_data[feature_info['important_features']]
        features.columns = [f"f{i}" for i in range(len(feature_info['important_features']))]
        predictions = model.predict(features.astype('float32'))
        
        for i, (idx, row) in enumerate(latest_data.iterrows()):
            data_date_str = str(raw_df.iloc[idx]['open_time'])[:10]  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã
            current_rsi = row['rsi_current']
            predicted_rsi = predictions[i]
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å
            try:
                data_date = pd.to_datetime(data_date_str)
                next_date = data_date + pd.Timedelta(days=1)
                next_date_str = next_date.strftime('%d.%m.%Y')
            except:
                next_date_str = "—Å–ª–µ–¥. –¥–µ–Ω—å"
            
            print(f"{data_date_str.replace('-', '.')}      | {current_rsi:11.2f} | {predicted_rsi:11.2f} (–Ω–∞ {next_date_str})")
    
    # 6. –û–±—ä—è—Å–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    print(f"\n‚è∞ 6. –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò:")
    print(f"   ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(raw_df)} –¥–Ω–µ–π")
    print(f"   ‚Ä¢ –î–∞–Ω–Ω—ã–µ –¥–ª—è ML: {len(processed_df)} –¥–Ω–µ–π (–ø–æ—Ç–µ—Ä–∏ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)")
    print(f"   ‚Ä¢ –ü–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∏–∑-–∑–∞:")
    print(f"     - –†–∞—Å—á–µ—Ç–∞ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö (–Ω—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è)")
    print(f"     - RSI —Ä–∞—Å—á–µ—Ç–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 14 –¥–Ω–µ–π)")
    print(f"     - MACD —Ä–∞—Å—á–µ—Ç–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 26 –¥–Ω–µ–π)")
    print(f"     - –£–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞)")
    
    print(f"\n‚úÖ –ò–¢–û–ì–û: –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å RSI –Ω–∞ –°–õ–ï–î–£–Æ–©–ò–ô –î–ï–ù–¨")
    print(f"    –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω–µ–π!")

def predict_specific_date(target_date):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
    """
    print(f"\nüéØ –ü–†–û–ì–ù–û–ó RSI –ù–ê {target_date}")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    raw_df = pd.read_csv("accumulatedData_2024.csv", parse_dates=["open_time"])
    processed_df = transform_rsi_features(raw_df)
    
    # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å –¥–æ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã
    target_date_parsed = pd.to_datetime(target_date)
    prev_date = target_date_parsed - pd.Timedelta(days=1)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
    matching_rows = processed_df[processed_df.index.map(lambda x: raw_df.iloc[x]['open_time'].date()) == prev_date.date()]
    
    if len(matching_rows) == 0:
        print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {prev_date.strftime('%d.%m.%Y')} –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ {target_date}")
        return
    
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    model, feature_info = load_rsi_model()
    if model is None:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    row_data = matching_rows.iloc[0]
    features = row_data[feature_info['important_features']].values.reshape(1, -1)
    features_df = pd.DataFrame(features, columns=[f"f{i}" for i in range(len(feature_info['important_features']))])
    
    prediction = model.predict(features_df.astype('float32'))[0]
    
    print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞: {prev_date.strftime('%d.%m.%Y')}")
    print(f"üéØ –ü—Ä–æ–≥–Ω–æ–∑ RSI –Ω–∞: {target_date}")
    print(f"üìà –¢–µ–∫—É—â–∏–π RSI: {row_data['rsi_current']:.2f}")
    print(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π RSI: {prediction:.2f}")

if __name__ == "__main__":
    show_prediction_dates()
    
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
    print("\n" + "="*60)
    predict_specific_date("2022-05-18")  # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 18 –º–∞—è 2022