#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
from RSIPredictor import transform_rsi_features
from RSIPredictionTest import load_rsi_model

def quick_accuracy_analysis():
    """
    –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ RSI
    """
    print("‚ö° –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –¢–û–ß–ù–û–°–¢–ò –ú–û–î–ï–õ–ò RSI")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    raw_df = pd.read_csv("accumulatedData_2024.csv")
    processed_df = transform_rsi_features(raw_df)
    model, feature_info = load_rsi_model()
    
    if model is None:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(processed_df)}")
    
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
    features = processed_df[feature_info['important_features']]
    features.columns = [f"f{i}" for i in range(len(feature_info['important_features']))]
    
    y_actual = processed_df['rsi_next_day'].values
    y_predicted = model.predict(features.astype('float32'))
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫–∏
    absolute_errors = np.abs(y_actual - y_predicted)
    
    print("\nüìà –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò –ü–û–ì–†–ï–®–ù–û–°–¢–ò:")
    print("=" * 50)
    
    mae = np.mean(absolute_errors)
    median_error = np.median(absolute_errors)
    max_error = np.max(absolute_errors)
    min_error = np.min(absolute_errors)
    std_error = np.std(absolute_errors)
    
    print(f"üìä –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE): {mae:.2f} –ø—É–Ω–∫—Ç–∞ RSI")
    print(f"üìä –ú–µ–¥–∏–∞–Ω–∞ –æ—à–∏–±–∫–∏: {median_error:.2f} –ø—É–Ω–∫—Ç–∞ RSI")
    print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {max_error:.2f} –ø—É–Ω–∫—Ç–∞ RSI")
    print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {min_error:.4f} –ø—É–Ω–∫—Ç–∞ RSI")
    print(f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_error:.2f} –ø—É–Ω–∫—Ç–∞ RSI")
    
    print(f"\nüéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–û–ß–ù–û–°–¢–ò:")
    print("=" * 50)
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
    within_1 = (np.sum(absolute_errors <= 1) / len(absolute_errors)) * 100
    within_2 = (np.sum(absolute_errors <= 2) / len(absolute_errors)) * 100
    within_3 = (np.sum(absolute_errors <= 3) / len(absolute_errors)) * 100
    within_5 = (np.sum(absolute_errors <= 5) / len(absolute_errors)) * 100
    within_10 = (np.sum(absolute_errors <= 10) / len(absolute_errors)) * 100
    
    print(f"üéØ –û—à–∏–±–∫–∞ ‚â§ 1 –ø—É–Ω–∫—Ç: {within_1:.1f}% –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print(f"üéØ –û—à–∏–±–∫–∞ ‚â§ 2 –ø—É–Ω–∫—Ç–∞: {within_2:.1f}% –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print(f"üéØ –û—à–∏–±–∫–∞ ‚â§ 3 –ø—É–Ω–∫—Ç–∞: {within_3:.1f}% –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print(f"üéØ –û—à–∏–±–∫–∞ ‚â§ 5 –ø—É–Ω–∫—Ç–æ–≤: {within_5:.1f}% –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print(f"üéØ –û—à–∏–±–∫–∞ ‚â§ 10 –ø—É–Ω–∫—Ç–æ–≤: {within_10:.1f}% –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print(f"\nüìà –¢–û–ß–ù–û–°–¢–¨ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("=" * 50)
    
    current_rsi = processed_df['rsi_current'].values
    actual_change = y_actual - current_rsi
    predicted_change = y_predicted - current_rsi
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    correct_direction = np.sign(actual_change) == np.sign(predicted_change)
    direction_accuracy = np.sum(correct_direction) / len(correct_direction) * 100
    
    print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {direction_accuracy:.1f}%")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    up_actual = np.sum(actual_change > 0)
    down_actual = np.sum(actual_change < 0)
    flat_actual = np.sum(actual_change == 0)
    
    up_predicted = np.sum(predicted_change > 0)
    down_predicted = np.sum(predicted_change < 0)
    flat_predicted = np.sum(predicted_change == 0)
    
    print(f"üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: ‚Üë{up_actual} ‚Üì{down_actual} ‚Üí{flat_actual}")
    print(f"üìä –ü—Ä–æ–≥–Ω–æ–∑:    ‚Üë{up_predicted} ‚Üì{down_predicted} ‚Üí{flat_predicted}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º RSI
    print(f"\nüìä –¢–û–ß–ù–û–°–¢–¨ –ü–û –î–ò–ê–ü–ê–ó–û–ù–ê–ú RSI:")
    print("=" * 50)
    
    oversold = y_actual < 30
    overbought = y_actual > 70
    neutral = (y_actual >= 30) & (y_actual <= 70)
    
    if np.sum(oversold) > 0:
        oversold_mae = np.mean(absolute_errors[oversold])
        print(f"üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (<30): {oversold_mae:.2f} MAE ({np.sum(oversold)} —Å–ª—É—á–∞–µ–≤)")
    else:
        print(f"üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (<30): –ù–µ—Ç —Å–ª—É—á–∞–µ–≤")
        
    if np.sum(overbought) > 0:
        overbought_mae = np.mean(absolute_errors[overbought])
        print(f"üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (>70): {overbought_mae:.2f} MAE ({np.sum(overbought)} —Å–ª—É—á–∞–µ–≤)")
    else:
        print(f"üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (>70): –ù–µ—Ç —Å–ª—É—á–∞–µ–≤")
        
    neutral_mae = np.mean(absolute_errors[neutral])
    print(f"‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ (30-70): {neutral_mae:.2f} MAE ({np.sum(neutral)} —Å–ª—É—á–∞–µ–≤)")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
    print(f"\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï –° –ë–ê–ó–û–í–´–ú–ò –ú–û–î–ï–õ–Ø–ú–ò:")
    print("=" * 50)
    
    # "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" - RSI –∑–∞–≤—Ç—Ä–∞ = RSI —Å–µ–≥–æ–¥–Ω—è
    no_change_mae = np.mean(np.abs(y_actual - current_rsi))
    
    # –°—Ä–µ–¥–Ω–∏–π RSI
    avg_rsi = np.mean(current_rsi)
    avg_model_mae = np.mean(np.abs(y_actual - avg_rsi))
    
    print(f"ü§ñ –ù–∞—à–∞ –º–æ–¥–µ–ª—å: {mae:.2f} MAE")
    print(f"üìä '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π': {no_change_mae:.2f} MAE")
    print(f"üìä '–°—Ä–µ–¥–Ω–∏–π RSI': {avg_model_mae:.2f} MAE")
    
    improvement = ((no_change_mae - mae) / no_change_mae) * 100
    print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}% –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'")
    
    # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    print(f"\nüí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø:")
    print("=" * 50)
    
    if mae <= 3:
        quality = "üèÜ –û–¢–õ–ò–ß–ù–ê–Ø"
        comment = "–ú–æ–¥–µ–ª—å –¥–∞–µ—Ç –æ—á–µ–Ω—å —Ç–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã"
    elif mae <= 5:
        quality = "‚úÖ –•–û–†–û–®–ê–Ø"
        comment = "–ú–æ–¥–µ–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    elif mae <= 7:
        quality = "‚ö° –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–ê–Ø"
        comment = "–ú–æ–¥–µ–ª—å –¥–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é"
    else:
        quality = "‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø"
        comment = "–ú–æ–¥–µ–ª—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"
    
    print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: {quality}")
    print(f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {mae:.2f} –∏–∑ 100 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ RSI ({mae/100*100:.1f}%)")
    
    # –ü—Ä–∏–º–µ—Ä—ã –±–æ–ª—å—à–∏—Ö –æ—à–∏–±–æ–∫
    large_errors = absolute_errors > 10
    if np.sum(large_errors) > 0:
        print(f"\n‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ï –û–®–ò–ë–ö–ò (>10 –ø—É–Ω–∫—Ç–æ–≤):")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {np.sum(large_errors)} –∏–∑ {len(absolute_errors)} ({np.sum(large_errors)/len(absolute_errors)*100:.1f}%)")
    else:
        print(f"\n‚úÖ –ë–æ–ª—å—à–∏—Ö –æ—à–∏–±–æ–∫ (>10 –ø—É–Ω–∫—Ç–æ–≤) –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û–ì–†–ï–®–ù–û–°–¢–ò:")
    print("=" * 60)
    print(f"üìä –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {mae:.2f} –ø—É–Ω–∫—Ç–∞ RSI")
    print(f"üìä –í 50% —Å–ª—É—á–∞–µ–≤ –æ—à–∏–±–∫–∞ ‚â§ {median_error:.2f} –ø—É–Ω–∫—Ç–∞")
    print(f"üìä –í {within_5:.0f}% —Å–ª—É—á–∞–µ–≤ –æ—à–∏–±–∫–∞ ‚â§ 5 –ø—É–Ω–∫—Ç–æ–≤")
    print(f"üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≥–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ {direction_accuracy:.0f}% —Å–ª—É—á–∞–µ–≤")
    print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {max_error:.2f} –ø—É–Ω–∫—Ç–∞")
    
    print(f"\nüöÄ –î–õ–Ø –¢–†–ï–ô–î–ò–ù–ì–ê:")
    print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å –Ω–∞–¥–µ–∂–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
    print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏")
    print(f"   ‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ —Ç–æ—á–Ω–∞ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ RSI (30-70)")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ {mae:.1f} –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞ –¥–ª—è RSI")
    
    return {
        'mae': mae,
        'median_error': median_error,
        'max_error': max_error,
        'within_5': within_5,
        'direction_accuracy': direction_accuracy
    }

if __name__ == "__main__":
    results = quick_accuracy_analysis()
    
    print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    if results:
        print(f"–°—Ä–µ–¥–Ω—è—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: {results['mae']:.2f} –ø—É–Ω–∫—Ç–∞ RSI")
        print(f"–¢–æ—á–Ω–æ—Å—Ç—å –≤ ¬±5 –ø—É–Ω–∫—Ç–æ–≤: {results['within_5']:.0f}% —Å–ª—É—á–∞–µ–≤")