#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import joblib
import numpy as np
from RSIPredictionTest import load_rsi_model

def try_onnx_export():
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ ONNX
    """
    print("üîÑ –ü–û–ü–´–¢–ö–ê –≠–ö–°–ü–û–†–¢–ê –í ONNX")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model, features = load_rsi_model()
    if model is None:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {type(model)}")
    print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features['important_features'])}")
    
    # –ú–µ—Ç–æ–¥ 1: Catboost –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
    try:
        print("\nüîÑ –ú–µ—Ç–æ–¥ 1: CatBoost –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...")
        model.save_model("models/rsi_model_catboost.cbm", format="cbm")
        print("‚úÖ –ú–æ–¥–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ CatBoost —Ñ–æ—Ä–º–∞—Ç (.cbm)")
        print("   –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ CatBoost –Ω–∞ –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
    except Exception as e:
        print(f"‚ùå CatBoost —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")
    
    # –ú–µ—Ç–æ–¥ 2: JSON —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
    try:
        print("\nüîÑ –ú–µ—Ç–æ–¥ 2: JSON —ç–∫—Å–ø–æ—Ä—Ç...")
        model.save_model("models/rsi_model.json", format="json")
        print("‚úÖ –ú–æ–¥–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç")
        print("   JSON –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
    except Exception as e:
        print(f"‚ùå JSON —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")
    
    # –ú–µ—Ç–æ–¥ 3: –°–æ–∑–¥–∞–Ω–∏–µ lightweight –≤–µ—Ä—Å–∏–∏
    try:
        print("\nüîÑ –ú–µ—Ç–æ–¥ 3: –°–æ–∑–¥–∞–Ω–∏–µ lightweight –º–æ–¥–µ–ª–∏...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
        model_info = {
            'model_type': 'CatBoostRegressor',
            'feature_names': features['important_features'],
            'feature_count': len(features['important_features']),
            'model_params': {
                'iterations': model.get_param('iterations'),
                'learning_rate': model.get_param('learning_rate'),
                'depth': model.get_param('depth'),
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        joblib.dump(model_info, "models/rsi_model_info.pkl")
        print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå Lightweight –≤–µ—Ä—Å–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
    
    # –ú–µ—Ç–æ–¥ 4: Python –∫–æ–¥ –º–æ–¥–µ–ª–∏
    try:
        print("\nüîÑ –ú–µ—Ç–æ–¥ 4: –≠–∫—Å–ø–æ—Ä—Ç –≤ Python –∫–æ–¥...")
        model.save_model("models/rsi_model.py", format="python")
        print("‚úÖ –ú–æ–¥–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ Python –∫–æ–¥")
        print("   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    except Exception as e:
        print(f"‚ùå Python –∫–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")
    
    print(f"\nüìÅ –î–û–°–¢–£–ü–ù–´–ï –§–û–†–ú–ê–¢–´:")
    import os
    formats = []
    
    if os.path.exists("models/rsi_predictor_model.pkl"):
        formats.append("‚úÖ PKL (pickle) - –¥–ª—è Python")
    if os.path.exists("models/rsi_model_features.pkl"):
        formats.append("‚úÖ PKL features - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
    if os.path.exists("models/rsi_model_catboost.cbm"):
        formats.append("‚úÖ CBM - CatBoost –±–∏–Ω–∞—Ä–Ω—ã–π")
    if os.path.exists("models/rsi_model.json"):
        formats.append("‚úÖ JSON - –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π")
    if os.path.exists("models/rsi_model.py"):
        formats.append("‚úÖ PY - Python –∫–æ–¥")
    
    for fmt in formats:
        print(f"   {fmt}")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   ‚Ä¢ –î–ª—è Python: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PKL —Ñ–∞–π–ª—ã")
    print(f"   ‚Ä¢ –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON/CBM")
    print(f"   ‚Ä¢ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞: —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ Python –∫–æ–¥ –≤–µ—Ä—Å–∏—é")

if __name__ == "__main__":
    try_onnx_export()