#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
from RSIPredictor import transform_rsi_features
from RSIPredictionTest import load_rsi_model

def predict_for_date(target_date="2025-06-30"):
    """
    –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ RSI –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    """
    print(f"üéØ –ü–†–û–ì–ù–û–ó RSI –ù–ê {target_date}")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìä 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    raw_df = pd.read_csv("accumulatedData_2024.csv", parse_dates=["open_time"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
    target_date_parsed = pd.to_datetime(target_date)
    prev_date = target_date_parsed - pd.Timedelta(days=1)
    
    print(f"   ‚Ä¢ –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ {prev_date.strftime('%d.%m.%Y')} –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ {target_date}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
    print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö:")
    for i in range(3):
        date_str = str(raw_df.iloc[-(i+1)]['open_time'])[:10]
        print(f"     - {date_str}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüîß 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    processed_df = transform_rsi_features(raw_df)
    
    if len(processed_df) == 0:
        print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ë–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É (–æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞ 29.06.2025)
    last_row = processed_df.iloc[-1]
    last_date_idx = processed_df.index[-1]
    actual_date = str(raw_df.iloc[last_date_idx]['open_time'])[:10]
    
    print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞: {actual_date}")
    print(f"   ‚Ä¢ –¢–µ–∫—É—â–∏–π RSI: {last_row['rsi_current']:.2f}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    print("\nü§ñ 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
    model, feature_info = load_rsi_model()
    
    if model is None:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python RSIPredictor.py")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    print("\nüîÆ 4. –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑...")
    features = last_row[feature_info['important_features']].values.reshape(1, -1)
    features_df = pd.DataFrame(features, columns=[f"f{i}" for i in range(len(feature_info['important_features']))])
    
    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥–∏–∫—Ç
    prediction = model.predict(features_df.astype('float32'))[0]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   üóì  –î–∞–Ω–Ω—ã–µ –∑–∞: {actual_date}")
    print(f"   üìä –¢–µ–∫—É—â–∏–π RSI: {last_row['rsi_current']:.2f}")
    print(f"   üéØ –ü–†–û–ì–ù–û–ó RSI –Ω–∞ {target_date}: {prediction:.2f}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞
    print(f"\nüí° –ê–ù–ê–õ–ò–ó:")
    current_rsi = last_row['rsi_current']
    change = prediction - current_rsi
    
    if prediction < 30:
        signal = "üü¢ –°–ò–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê - –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
    elif prediction < 40:
        signal = "üîµ –ü–û–ö–£–ü–ö–ê - –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
    elif prediction > 70:
        signal = "üî¥ –°–ò–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê - –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
    elif prediction > 60:
        signal = "üü† –ü–†–û–î–ê–ñ–ê - –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
    else:
        signal = "‚ö™ –ù–ï–ô–¢–†–ê–õ–¨–ù–û - –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω"
    
    print(f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ RSI: {change:+.2f} –ø—É–Ω–∫—Ç–æ–≤")
    print(f"   üéØ –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal}")
    
    if abs(change) > 5:
        print(f"   ‚ö° –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ RSI!")
    
    return prediction, current_rsi, change

def get_latest_predictions(num_days=5):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π
    """
    print(f"\nüìÖ –ü–û–°–õ–ï–î–ù–ò–ï {num_days} –ü–†–û–ì–ù–û–ó–û–í:")
    print("=" * 60)
    print("–î–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö  | –¢–µ–∫—É—â–∏–π RSI | –ü—Ä–æ–≥–Ω–æ–∑ RSI | –ò–∑–º–µ–Ω–µ–Ω–∏–µ | –°–∏–≥–Ω–∞–ª")
    print("-" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    raw_df = pd.read_csv("accumulatedData_2024.csv", parse_dates=["open_time"])
    processed_df = transform_rsi_features(raw_df)
    model, feature_info = load_rsi_model()
    
    if model is None or len(processed_df) < num_days:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
    last_rows = processed_df.tail(num_days)
    
    for i, (idx, row) in enumerate(last_rows.iterrows()):
        # –î–∞—Ç–∞
        date_str = str(raw_df.iloc[idx]['open_time'])[:10]
        
        # –¢–µ–∫—É—â–∏–π RSI
        current_rsi = row['rsi_current']
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        features = row[feature_info['important_features']].values.reshape(1, -1)
        features_df = pd.DataFrame(features, columns=[f"f{i}" for i in range(len(feature_info['important_features']))])
        prediction = model.predict(features_df.astype('float32'))[0]
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ
        change = prediction - current_rsi
        
        # –°–∏–≥–Ω–∞–ª
        if prediction < 30:
            signal = "üü¢ –ü–û–ö–£–ü–ö–ê"
        elif prediction > 70:
            signal = "üî¥ –ü–†–û–î–ê–ñ–ê"
        else:
            signal = "‚ö™ –ù–ï–ô–¢–†–ê–õ"
        
        print(f"{date_str} | {current_rsi:10.2f} | {prediction:10.2f} | {change:8.2f} | {signal}")

if __name__ == "__main__":
    print("üöÄ –ü–†–û–ì–ù–û–ó RSI –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –î–ï–ù–¨")
    print("=" * 60)
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30.06.2025
    try:
        prediction, current, change = predict_for_date("2025-06-30")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        get_latest_predictions(5)
        
        print(f"\n‚úÖ –ò–¢–û–ì–û: –ü—Ä–æ–≥–Ω–æ–∑ RSI –Ω–∞ 30.06.2025 = {prediction:.2f}")
        print(f"   (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.2f} –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ {current:.2f})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ó–∞–ø—É—â–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å: python RSIPredictor.py")
        print("2. –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ accumulatedData_2024.csv")